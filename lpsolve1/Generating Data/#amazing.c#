#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include "lp_lib.h"

//all definitions can be changed according to the given case

#define nspot 50
#define tc 0
#define tr 0
#define W 100
#define td 200
#define num 1000

float temp1;    //value of the objective function from LP

REAL* amazing(REAL** P)    //P is the transition matrix
{
  lprec *lp;
  int Ncol, *colno = NULL, j,i,k, ret = 0;
  REAL *row = NULL;
  Ncol=8*nspot;
  lp=make_lp(0,Ncol);
  if(lp==NULL)ret=1;
  if(ret==0){
    colno=(int*)malloc(Ncol*sizeof(*colno));
    row=(REAL*)malloc(Ncol*sizeof(*row));
    if((colno==NULL)||(row==NULL))ret=2;
  }
  if(ret==0){
    //create the 1st constraint : rho(xi,ai)>=0 for all xi and ai
    set_add_rowmode(lp,TRUE);
    
    for(j=0;j<Ncol;++j){
      colno[j]=j+1;
      row[j]=0;
    }
    row[0]=1;
    for(j=1;j<Ncol;++j){
      if(!add_constraintex(lp, Ncol, row, colno, GE, 0))ret = 3;
      row[j-1]=0;
      row[j]=1;
    }
    if(!add_constraintex(lp, Ncol, row, colno, GE, 0))ret = 3;    
  }  
  if(ret==0){
    //the third constraint: sum(rho(xi,ai))=1
    for(j=0;j<Ncol;++j){
      row[j]=1;
    }
    if(!add_constraintex(lp, Ncol, row, colno, EQ, 1))ret = 3; 
  }
  
  if(ret==0){
    //Note: the naming scheme is as follows- 0 to nspot is 111, nspot to 2*nspot is 110
    //2*nspot to 3*nspot is 011,3 to 4 is 010, 4 to 5 is 101,5 to 6 is 100
    //6 to 7 is 001 and 7 to 8 is 000.
    
    //where 1 is in bid, 0 is out of bid, 1st digit for previous, middle digit for current and last digit for bid option taken(B,G)
    
    //creating the 2nd constraint which says average expected execution progress per instance hour is greater than W/td
    
    for(j=0;j<Ncol;++j){
      row[j]=0;
    }
    for(j=0;j<nspot;++j){
      row[j]=1;
    }
    for(j=nspot;j<2*nspot;++j){
      row[j]=1-tc;
    }
    for(j=2*nspot;j<3*nspot;++j){
      row[j]=1-tr;
    }
    for(j=3*nspot;j<4*nspot;++j){
      row[j]=1-tc-tr;
    }
    float z=(float)W/td;    
    if(!add_constraintex(lp, Ncol, row, colno, GE, z))ret = 3;
  }  

  //the next 4 entries to the lp together constitute the last constraint
  //which states that incoming and outgoing rate for a state must be equal
  
  if(ret==0){
    for(j=0;j<Ncol;j++){
      row[j]=0;
    }
    for(j=0;j<nspot;j++){
      row[j]=1;
      row[j+nspot]=1;
      for(i=0;i<nspot;++i){
	row[i]-=P[i][j];
      }
      for(i=2*nspot;i<3*nspot;++i){
       	row[i]-=P[i%nspot][j];
      }
      if(!add_constraintex(lp, Ncol, row, colno, EQ, 0))ret = 3;
      for(k=0;k<Ncol;++k){
	row[k]=0;
      }
    }
  }
  if(ret==0){
    for(j=0;j<Ncol;j++){
      row[j]=0;
    }
    for(j=2*nspot;j<3*nspot;j++){
      row[j]=1;
      row[j+nspot]=1;
      for(i=4*nspot;i<5*nspot;++i){
	row[i]-=P[i%nspot][j%nspot];
      }
      for(i=6*nspot;i<7*nspot;++i){
	row[i]-=P[i%nspot][j%nspot];
      }
      if(!add_constraintex(lp, Ncol, row, colno, EQ, 0))ret = 3;
      for(k=0;k<Ncol;k++){
	row[k]=0;
      }
    }
  }
  if(ret==0){
    for(j=0;j<Ncol;j++){
      row[j]=0;
    }
    for(j=4*nspot;j<5*nspot;j++){
      row[j]=1;
      row[j+nspot]=1;
      for(i=nspot;i<2*nspot;++i){
	row[i]-=P[i%nspot][j%nspot];
      }
      for(i=3*nspot;i<4*nspot;i++){
	row[i]-=P[i%nspot][j%nspot];
      }
      if(!add_constraintex(lp, Ncol, row, colno, EQ, 0))ret = 3;
      for(k=0;k<Ncol;k++){
	row[k]=0;
      }
    }
  }
  if(ret==0){
    for(j=0;j<Ncol;j++){
      row[j]=0;
    }
    for(j=6*nspot;j<7*nspot;j++){
      row[j]=1;
      row[j+nspot]=1;
      for(i=5*nspot;i<6*nspot;++i){
	row[i]-=P[i%nspot][j%nspot];
      }
      for(i=7*nspot;i<8*nspot;i++){
	row[i]-=P[i%nspot][j%nspot];
      }
      if(!add_constraintex(lp, Ncol, row, colno, EQ, 0))ret = 3;
      for(k=0;k<Ncol;k++){
	row[k]=0;
      }
    }
  }
  
  //all constraints for the LP have been created
  //now it is time to set the objective function, which we then minimise

  if(ret == 0) {
    set_add_rowmode(lp, FALSE);
    j = 0;
    for(j=0;j<4*nspot;j++){
      row[j]=j%nspot+1;
      row[j]*=td;
    }
    /* set the objective in lpsolve */
    if(!set_obj_fnex(lp, Ncol, row, colno))
      ret = 4;
  }

  if(ret == 0){
    /* set the object direction to minimize */
    set_minim(lp);    
    write_LP(lp,fp);
    set_verbose(lp, IMPORTANT);//only important messages
    /* Now let lpsolve calculate a solution */
    ret = solve(lp);
    if(ret == OPTIMAL)
      ret = 0;
    else
      ret = 5;
  }

  if(ret == 0) {
    
    temp1=get_objective(lp);
    get_variables(lp, row);
    //row contains the values of variables and temp1 contains the result of the LP
  }
  return row;
}

int rand_choose(float a,float b){
  //here a is the probability of 1 and b is the probability of 0
  float p1=a/(a+b);
  float p2=1-p1;
  p1*=1000;
  p2*=1000;
  int r=rand();
  r%=1000;
  if(r<=p1)return 1;
  return 0;
}

int main(){
  
  REAL** P=(REAL**)malloc(nspot*sizeof(REAL*));
  int i,j;
  REAL* row;
  
  for(i=0;i<nspot;++i){
    P[i]=(REAL*)malloc(nspot*sizeof(REAL));
  }
  for(i=0;i<nspot;++i){
    //entering the Transition matrix for testing
    for(j=0;j<nspot;++j){
      if(i==j)P[i][j]=0.51;
      else P[i][j]=0.01;
    }
  }  
  row=amazing(P);
  int netsum[num]={0};  //where num is the number of files to be tested
  
  int price;            //price is the current spot price
  
  int* output;          //output is the array containing either 0 or 1, based on whether we Bid or Give up
  
  int sum;              //sum is the work done till a particular time. if sum==W, we stop
  
  float avg=0;          //avg is the average cost it takes us to complete a task
  
  float avgt=0;         //avgt is the average time it takes us to complete a task
  
  int avgtime[num]={0}; //avgtime contains the time taken for each task
  
  output=(int*)malloc(2*W*sizeof(int));
  
  for(i=0;i<num;i++){
    sum=2;   //since we take 1st 2 states as bid
    output[0]=1;
    output[1]=1;
    
    for(j=2;j<2*W;j++){
      price=tester[i][j];
      if(output[j-1]==1&&output[j-2]==1){
	output[j]=rand_choose(row[price-1],row[price+nspot-1]);
      }
      else if(output[j-1]==1&&output[j-2]==0){
	output[j]=rand_choose(row[2*nspot+price-1],row[3*nspot+price-1]);
      }
      else if(output[j-1]==0&&output[j-2]==1){
	output[j]=rand_choose(row[4*nspot+price-1],row[5*nspot+price-1]);
      }
      else if(output[j-1]==0&&output[j-2]==0){
	output[j]=rand_choose(row[6*nspot+price-1],row[7*nspot+price-1]);
      }
      if(output[j]==1){
	sum++;
	netsum[i]+=price;
      }
      if(sum==W){
	avgtime[i]=j;
	break;
      }
    }
    netsum[i]+=(tester[i][0]+tester[i][1]);
    avg+=(netsum[i]);
    avgt+=avgtime[i];
  }
  avg/=(float)num;
  avgt/=(float)num;
  return 0;
}
